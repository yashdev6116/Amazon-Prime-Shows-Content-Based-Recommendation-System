# -*- coding: utf-8 -*-
"""Amazon Prime Shows Content-Based Recommendation System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11Z4VHW8-5QoMj_DCAI_RUloUzwn11aNQ
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data=pd.read_csv('data.csv')

data.head()

# Remove specified columns
data = data.drop(['releaseYear', 'availableCountries', 'imdbId','imdbNumVotes','imdbAverageRating'], axis=1, errors='ignore')
data.head()

data.isnull().sum()

data = data.dropna()
data.isnull().sum()

data.shape

data['label'] = data['type'] + ' ' + data['genres']
data = data.drop(['type', 'genres'], axis=1)
data.head()

data.shape

import nltk
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('wordnet')
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from nltk.tokenize import word_tokenize

stop_words = set(stopwords.words('english'))
stemmer = PorterStemmer()

def preprocess_text(text):
    if isinstance(text, str):  # Check if the input is a string
        words = word_tokenize(text.lower())
        words = [w for w in words if not w in stop_words and w.isalnum()]
        words = [stemmer.stem(w) for w in words]
        return ' '.join(words)
    else:
        return '' # Return an empty string for non-string inputs


data['label'] = data['label'].apply(preprocess_text)
data.head()

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

tfidf = TfidfVectorizer()
tfidf_matrix = tfidf.fit_transform(data['label'])

data.head()

cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

indices = pd.Series(data.index, index=data['title']).drop_duplicates()

def get_recommendations(title, cosine_sim=cosine_sim):
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:11] # Get top 10 similar movies
    movie_indices = [i[0] for i in sim_scores]
    return data['title'].iloc[movie_indices]

# Example usage:
movie_title = input("Enter The Full Movie Name: ")
recommendations = get_recommendations(movie_title)
print(recommendations.head())